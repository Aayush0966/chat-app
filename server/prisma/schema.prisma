// This is your Prisma schema file,
// Learn more at: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  GOOGLE
  FACEBOOK
  CREDENTIALS
  GITHUB
}

enum ReadType {
  READ
  UNREAD
}

enum MessageType {
  TEXT
  VOICE
  ATTACHMENT
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  firstName        String?
  lastName         String?
  phoneNumber      String?           @unique
  password         String?
  refreshToken     String?
  verificationOTP  String?
  account          Account?          @relation("UserAccount")
  otp              Otp?              @relation
  createdChats     Chat[]            @relation("ChatCreator")
  sentMessages     Message[]         @relation("MessageSender")
  chatParticipants ChatParticipant[]
  messageReads     MessageRead[]
  deletedMessages  DeletedMessage[]
  messageReactions MessageReaction[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Account {
  id          String      @id @default(cuid())
  userId      String      @unique
  user        User        @relation("UserAccount", fields: [userId], references: [id], onDelete: Cascade)
  accountType AccountType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Otp {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  purpose   String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id           String            @id @default(cuid())
  name         String?
  isGroup      Boolean           @default(false)
  creatorId    String?
  creator      User?             @relation("ChatCreator", fields: [creatorId], references: [id])
  participants ChatParticipant[]
  messages     Message[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model ChatParticipant {
  id       String   @id @default(cuid())
  userId   String
  chatId   String
  user     User     @relation(fields: [userId], references: [id])
  chat     Chat     @relation(fields: [chatId], references: [id])
  deleted  Boolean  @default(false)
  joinedAt DateTime @default(now())
}

model Message {
  id              String            @id @default(cuid())
  senderId        String
  chatId          String
  text            String?
  attachment      String?
  sentAt          DateTime          @default(now())
  type            MessageType
  sender          User              @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  chat            Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  reads           MessageRead[]
  deletedMessages DeletedMessage[]
  reactions       MessageReaction[]
}

model DeletedMessage {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  deletedAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  reactedAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}
